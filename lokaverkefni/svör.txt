 3. Select MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST FROM movie WHERE MOVIE_TITLE LIKE '%hope%';

 4. SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_GENRE, MOVIE_YEAR FROM movie WHERE MOVIE_GENRE = 'ACTION';

 5. SELECT MOVIE_NUM, MOVIE_TITLE, MOVIE_COST FROM movie WHERE MOVIE_COST > 40;

 6. SELECT MOVIE_NUM, MOVIE_TITLE, MOVIE_COST, MOVIE_GENRE FROM movie WHERE MOVIE_COST > 50 AND MOVIE_GENRE = 'ACTION' OR 'COMEDY' ORDER BY MOVIE_GENRE;

 7. SELECT MOVIE_NUM, CONCAT(MOVIE_TITLE, ' (',MOVIE_YEAR, ') ', MOVIE_GENRE) FROM MOVIE;

 8. SELECT MOVIE_GENRE, COUNT(MOVIE_GENRE) AS 'Number of movies' FROM movie group by MOVIE_GENRE;

 9. SELECT Avg(MOVIE_COST) AS 'Average movie cost' FROM movie;

10. SELECT MOVIE_GENRE, AVG(MOVIE_COST) AS 'Avarage cost' FROM movie group by MOVIE_GENRE;

11. SELECT movie.MOVIE_TITLE, movie.MOVIE_GENRE, price.PRICE_DESCRIPTION, price.PRICE_RENTFEE 

    FROM movie
INNER 
    JOIN price
ON movie.PRICE_CODE = price.PRICE_CODE
    
WHERE price.PRICE_CODE != 0

12. SELECT movie.MOVIE_GENRE, AVG(price.PRICE_RENTFEE) AS 'Avarage rental fee' 

    FROM movie
    
INNER JOIN price
ON movie.PRICE_CODE = price.PRICE_CODE    
    
WHERE price.PRICE_CODE != 0
GROUP BY MOVIE_GENRE;

13. SELECT movie.MOVIE_TITLE, movie.MOVIE_YEAR, movie.MOVIE_COST / price.PRICE_RENTFEE AS 'Breakeven Rentals' 

    FROM movie

    INNER JOIN price
ON movie.PRICE_CODE = price.PRICE_CODE 

14. SELECT MOVIE_TITLE, MOVIE_YEAR FROM MOVIE WHERE PRICE_CODE != 0;

15. SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST FROM MOVIE WHERE MOVIE_COST > 44.99 AND MOVIE_COST < 49.99;

16. SELECT movie.MOVIE_TITLE, movie.MOVIE_YEAR, price.PRICE_DESCRIPTION, price.PRICE_RENTFEE 
    
FROM movie
    
INNER JOIN price
ON movie.PRICE_CODE = price.PRICE_CODE
    
WHERE MOVIE_GENRE = 'FAMILY' OR MOVIE_GENRE = 'COMEDY' OR MOVIE_GENRE = 'DRAMA';

17. SELECT MIN(MEM_BALANCE), MAX(MEM_BALANCE), AVG(MEM_BALANCE) FROM membership;

18. SELECT CONCAT(MEM_FNAME, ' ',MEM_LANME), CONCAT(MEM_STREET, ' ', MEM_CITY, ' ', MEM_STATE, ' ', MEM_ZIP) FROM membership;

19. SELECT rental.RENT_NUM, rental.RENT_DATE, video.VID_NUM, movie.MOVIE_TITLE, DETAIL_DUEDATE, DETAIL_RETURNDATE

    FROM detailrental

    INNER JOIN VIDEO

    ON video.VID_NUM = detailrental.VID_NUM

    INNER JOIN rental

    ON rental.RENT_NUM = detailrental.RENT_NUM

    INNER JOIN movie
ON movie.MOVIE_NUM = video.MOVIE_NUM

    WHERE DETAIL_RETURNDATE > DETAIL_DUEDATE
    ORDER BY rental.RENT_NUM, movie.MOVIE_TITLE;

20. SELECT rental.RENT_NUM, rental.RENT_DATE, video.VID_NUM, movie.MOVIE_TITLE, detailrental.DETAIL_DUEDATE, detailrental.DETAIL_RETURNDATE, detailrental.DETAIL_FEE, detailrental.DETAIL_RETURNDATE - detailrental.DETAIL_DUEDATE AS 'Days Past Due'

    FROM detailrental

    INNER JOIN VIDEO

    ON video.VID_NUM = detailrental.VID_NUM

    INNER JOIN rental

    ON rental.RENT_NUM = detailrental.RENT_NUM

    INNER JOIN movie

    ON movie.MOVIE_NUM = video.MOVIE_NUM
    
WHERE DETAIL_RETURNDATE > DETAIL_DUEDATE
    
ORDER BY rental.RENT_NUM, movie.MOVIE_TITLE; 

21. SELECT rental.RENT_NUM, rental.RENT_DATE, movie.MOVIE_TITLE, detailrental.DETAIL_FEE

    FROM detailrental

    INNER JOIN VIDEO

    ON video.VID_NUM = detailrental.VID_NUM

    INNER JOIN rental

    ON rental.RENT_NUM = detailrental.RENT_NUM

    INNER JOIN movie

    ON movie.MOVIE_NUM = video.MOVIE_NUM
    
WHERE DETAIL_DUEDATE >= DETAIL_RETURNDATE; 

22. SELECT membership.MEM_NUM, membership.MEM_LANME, membership.MEM_FNAME  , SUM(detailrental.DETAIL_FEE) AS 'Rental Fee Revenue' 

     FROM rental

     INNER JOIN membership

     ON membership.MEM_NUM = rental.MEM_NUM

     INNER JOIN detailrental

     ON detailrental.RENT_NUM = rental.RENT_NUM

     GROUP BY RENTAL.MEM_NUM;

23. SELECT MOVIE_NUM, MOVIE_GENRE, AVG(MOVIE_COST) AS 'AVARAGE COST' ,ROUND((MOVIE_COST - AVG(MOVIE_COST)) / AVG(MOVIE_COST) * 100) AS 'Percent difference',MOVIE_COST

    FROM MOVIE
    
GROUP BY MOVIE_GENRE

    ORDER BY MOVIE_NUM;

24. ALTER TABLE detailrental
    
ADD COLUMN DETAIL_DAYSLATE INT(3);

25. ALTER TABLE video

    ADD COLUMN VID_STATUS CHAR(4) NOT NULL DEFAULT 'IN' CHECK(VID_STATUS = 'OUT' OR VID_STATUS = 'IN' OR VID_STATUS = 'LOST') 

26. UPDATE video

    SET VID_STATUS = 'LOST'
    
WHERE VID_NUM IN (SELECT VID_NUM
    FROM detailrental 
    WHERE DETAIL_RETURNDATE = NULL)

27. ALTER TABLE price
ADD COLUMN PRICE_RENTDAYS INT(2) DEFAULT 3 NOT NULL;

28. UPDATE PRICE

    SET PRICE_RENTDAYS = 5

    WHERE PRICE_CODE = 1;

    UPDATE PRICE

    SET PRICE_RENTDAYS = 3
    
WHERE PRICE_CODE = 2;

    UPDATE PRICE
    
SET PRICE_RENTDAYS = 5

    WHERE PRICE_CODE = 3;

    UPDATE PRICE

    SET PRICE_RENTDAYS = 7

    WHERE PRICE_CODE = 4;

29. 
DELIMITER //

    CREATE TRIGGER trg_late_return

    BEFORE UPDATE ON DETAILRENTAL

    FOR EACH ROW

    BEGIN

    IF NEW.DETAIL_RETURNDATE IS NOT NULL THEN

    UPDATE DETAILRENTAL

    SET DETAIL_DAYSLATE = NEW.DETAIL_RETURNDATE - NEW.DETAIL_DUEDATE

    WHERE DETAIL_RETURNDATE > DETAIL_DUEDATE;

    END IF;

    END;
    //
DELIMITER ;

30. DELIMITER //

    CREATE TRIGGER trg_mem_balance

    AFTER UPDATE ON DETAILRENTAL

    FOR EACH ROW

    BEGIN

    IF MEM_BALANCE IS NOT NULL THEN

    UPDATE membership

    SET MEM_BALANCE = (DETAIL_DAYSLATE * PRICE_DAILYLATEFEE) - (NEW.DETAIL_DAYSLATE * PRICE_DAILYLATEFEE);

    END IF;

    END;
    //
DELIMITER ;

31. 